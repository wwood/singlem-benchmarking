import extern
import polars as pl

num_threads = config['benchmarking_threads']
kraken_num_threads = 999 # never let kraken be parallelised, because otherwise it will exhaust the RAM.

relabund_tools = ['singlem', 'metaphlan', 'motus', 'sourmash', 'map2b']
reads_wise_tools = ['kraken', 'kaiju', 'metabuli']
tools = relabund_tools + reads_wise_tools

output_prefix = 'output_'
output_dirs = list([output_prefix+tool for tool in tools])
output_dirs_dict = dict(zip(tools, output_dirs))

benchmark_dir = 'benchmarks'

fastq_dir = 'local_reads'
truth_dir = 'truths'

novelties = pl.read_csv(os.path.join(workflow.basedir, 'stratified_genome_metadata.tsv'), separator='\t', has_header=True)
novelties.columns = ['sample','novelty','r214_taxonomy']

r207_novelties = pl.read_csv(os.path.join(workflow.basedir, 'stratified_gtdbtk_r207.tsv'), separator='\t', has_header=True)
r207_novelties.columns = ['sample','r207_taxonomy']

paired_genomes = (
    pl.read_csv(os.path.join(workflow.basedir, 'genome_pairs.tsv'), separator='\t', has_header=True)
    .with_columns(
        pl.col("paired_genome")
            .str.replace("^", os.path.join(workflow.basedir, "genome_pairs", ""))
            .str.replace("$", ".fna"),
        )
    )
paired_genomes.columns = ['sample','example_genome','example_taxonomy']

# Debug
# relabund_tools = ['motus']
# reads_wise_tools = []
# novelties = novelties.filter(pl.col('sample')=='GCA_020052375.1_genomic')

tools = relabund_tools + reads_wise_tools
print("Profiling {} over {} genomes".format(tools, len(novelties)))

##################################################################### things that should be in config

singlem_git_base_directory = os.path.join(workflow.basedir, '../singlem')

##################################################################### reference databases

from tool_reference_data import *

# metapackage = '/work/microbiome/msingle/mess/163_S3.1.1_metapackage/output_dir/metapackage/S3.1.1.GTDB_r207.metapackage_20240302.smpkg'
singlem_metapackage_local = join(output_dirs_dict['singlem'], 'data', os.path.basename(singlem_metapackage))

# metaphlan_db_original1 = '/work/microbiome/msingle/mess/115_camisim_ish_benchmarking/metaphlan_bowtiedb'
metaphlan_db_local1 = output_dirs_dict['metaphlan'] + '/metaphlan/data/metaphlan_bowtiedb'

# motus_db_path_original = '/work/microbiome/msingle/mess/124_singlem-benchmarking/db_mOTU'
# motus_db_path_local = output_dirs_dict['motus'] + '/motus/data/db_mOTU'
# motus_gtdb_tsv = '/work/microbiome/msingle/mess/115_camisim_ish_benchmarking/motus/mOTUs_3.0.0_GTDB_tax.tsv'

# kraken_db = "/work/microbiome/db/struo2/GTDB_release207"
kraken_db_local = output_dirs_dict['kraken'] + "/kraken/data/GTDB_release207"

# sourmash_db1_original = '/work/microbiome/msingle/mess/105_novelty_testing/gtdb-rs207.taxonomy.sqldb'
# sourmash_db2_original = '/work/microbiome/msingle/mess/105_novelty_testing/gtdb-rs207.genomic-reps.dna.k31.zip'
sourmash_db1 = output_dirs_dict['sourmash'] + '/sourmash/data/gtdb-rs207.taxonomy.sqldb'
sourmash_db2 = output_dirs_dict['sourmash'] + '/sourmash/data/gtdb-rs207.genomic-reps.dna.k31.zip'

# kaiju_db_original_dir = '/work/microbiome/msingle/mess/128_kaiju/progenomes'
# kaiju_db_original_progenomes_fmi = kaiju_db_original_dir + '/kaiju_db_progenomes.fmi'
# kaiju_db_original_progenomes_nodes = kaiju_db_original_dir + '/nodes.dmp'
# kaiju_db_original_progenomes_names = kaiju_db_original_dir + '/names.dmp'
kaiju_db = output_dirs_dict['kaiju'] + '/kaiju/data/kaiju_db_progenomes.fmi'
kaiju_db_progenomes_nodes = output_dirs_dict['kaiju'] + '/kaiju/data/nodes.dmp'
kaiju_db_progenomes_names = output_dirs_dict['kaiju'] + '/kaiju/data/names.dmp'

# map2b_checkout_dir = '/home/woodcrob/bioinfo/MAP2B'
# map2b_db = os.path.join(map2b_checkout_dir, 'database.bak/GTDB')
# map2b_db_local = output_dirs_dict['map2b'] + '/map2b/data/GTDB'

# metabuli_db = '/work/microbiome/db/metabuli/gtdb207'
metabuli_db_local = output_dirs_dict['metabuli'] + '/metabuli/data/gtdb207'

#####################################################################


rule all:
    input:
        expand(output_prefix+"{tool}/opal/{sample}.relabund.opal_report", sample=novelties['sample'], 
            tool=[t for t in tools if t in relabund_tools]),
        expand(output_prefix+"{tool}/opal/{sample}.reads_wise.opal_report", sample=novelties['sample'],
            tool=[t for t in tools if t in reads_wise_tools]),

def get_paired_genome_fasta(wildcards):
    return paired_genomes.filter(pl.col('sample')==wildcards.sample).get_column('example_genome')[0]

def get_paired_taxonomy(wildcards):
    return paired_genomes.filter(pl.col('sample')==wildcards.sample).get_column('example_taxonomy')[0]

rule generate_community_and_reads:
    output:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        condensed = truth_dir + "/{sample}.relabund_condensed",
        reads_wise_condensed = truth_dir + "/{sample}.reads_wise_condensed",
        done = fastq_dir + "/{sample}.finished"
    threads: 1
    conda:
        'envs/art.yml'
    params:
        genome_fasta = os.path.join(workflow.basedir, 'genomes/{sample}.fna'),
        taxonomy = lambda wildcards: r207_novelties.filter(pl.col('sample')==wildcards.sample).get_column('r207_taxonomy')[0],
        paired_genome_fasta = get_paired_genome_fasta,
        paired_taxonomy = get_paired_taxonomy,
    shell:
        "mkdir -p {truth_dir} {fastq_dir} && "
        "{workflow.basedir}/generate_2component_community.py "
        "--art art_illumina "
        "--genome-fasta {params.genome_fasta} "
        "--example-fasta {params.paired_genome_fasta} "
        "--example-taxonomy '{params.paired_taxonomy}' "
        "--output-condensed {output.condensed} "
        "--output-reads-wise-condensed {output.reads_wise_condensed} "
        "-1 {fastq_dir}/{wildcards.sample}.1.fq.gz "
        "-2 {fastq_dir}/{wildcards.sample}.2.fq.gz "
        "--taxonomy '{params.taxonomy}' "
        "&& touch {output.done}"

rule truth_condensed_to_biobox:
    input:
        condensed = truth_dir + "/{sample}.{method}_condensed",
    output:
        biobox = truth_dir + "/{sample}.{method}_condensed.biobox",
    conda:
        "envs/singlem.yml"
    shell:
        "{singlem_git_base_directory}/extras/condensed_profile_to_biobox.py --input-condensed-table {input.condensed} " \
        "--output-biobox {output.biobox}"

def get_condensed_to_biobox_extra_args(tool):
    if tool in tools_with_filled_output_profiles:
        return ' --no-fill'
    else:
        return ''

rule tool_relabund_condensed_to_biobox:
    input:
        profile = output_prefix + "{tool}/{tool}/{sample}.profile",
        truth = truth_dir + "/{sample}.relabund_condensed.biobox",
    params:
        extra_args = lambda wildcards: get_condensed_to_biobox_extra_args(wildcards.tool)
    output:
        biobox = output_prefix + "{tool}/biobox/{sample}.biobox",
    conda:
        "envs/singlem.yml"
    shell:
        "{singlem_git_base_directory}/extras/condensed_profile_to_biobox.py {params.extra_args} --input-condensed-table {input.profile} " \
        "--output-biobox {output.biobox} --template-biobox {input.truth} "

rule opal:
    input:
        biobox = output_prefix+"{tool}/biobox/{sample}.biobox",
        truth = truth_dir + "/{sample}.{method}_condensed.biobox",
    params:
        output_dir = output_prefix+"{tool}",
        output_opal_dir = output_prefix+"{tool}/opal/{sample}.{method}.opal_output_directory",
    output:
        report=output_prefix+"{tool}/opal/{sample}.{method}.opal_report",
        done=output_prefix+"{tool}/opal/{sample}.{method}.opal_report.done",
    conda:
        'envs/opal.yml'
    shell:
        "opal.py -g {input.truth} -o {params.output_opal_dir} {input.biobox} || echo 'expected opal non-zero existatus'; mv {params.output_opal_dir}/results.tsv {output.report} && rm -rf {params.output_opal_dir} && touch {output.done}"


###############################################################################################
###############################################################################################
###############################################################################################
#########
######### tool-specific rules - singlem first

rule singlem_copy_metapackage:
    input:
        singlem_metapackage
    output:
        db=directory(singlem_metapackage_local),
        done=output_dirs_dict['singlem'] + "/singlem/data/done",
    shell:
        "cp -rL {input} {output.db} && touch {output.done}"

rule singlem_run_to_profile:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        db=singlem_metapackage_local,
        data_done=output_dirs_dict['singlem'] + "/singlem/data/done"
    benchmark:
        benchmark_dir + "/singlem/{sample}-"+str(num_threads)+"threads.benchmark"
    output:
        report=output_dirs_dict['singlem'] + "/singlem/{sample}.profile",
        done=output_dirs_dict['singlem'] + "/singlem/{sample}.profile.done"
    conda:
        "envs/singlem.yml"
    threads:
        1
    shell:
        "singlem pipe --threads {threads} -1 {input.r1} -2 {input.r2} -p {output.report} --metapackage {input.db} && touch {output.done}"


###############################################################################################
###############################################################################################
###############################################################################################
#########
######### metaphlan


rule metaphlan_copy_db:
    input:
        # Cannot use the directory as input/output because humann complains when
        # there's a snakemake hidden file in the dir

        # db1=directory(metaphlan_db_original1),
        # db2=directory(metaphlan_db_original2),
    output:
        # db1=directory(metaphlan_db_local1),
        # db2=directory(metaphlan_db_local2),
        done=touch(output_dirs_dict['metaphlan'] + "/metaphlan/data/done")
    shell:
        "cp -rvL {metaphlan_db} {metaphlan_db_local1}"

rule metaphlan_profile:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        done=output_dirs_dict['metaphlan'] + "/metaphlan/data/done"
    benchmark:
        benchmark_dir + "/metaphlan/{sample}-"+str(num_threads)+"threads.benchmark"
    output:
        sgb_report=output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.sgb_report",
        done=output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.profile.done"
    conda:
        "envs/metaphlan.yml"
    threads: num_threads
    params:
        cat_reads = output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.cat.fq.gz",
    shell:
        # Concatenate input files because metaphlan can't handle multiple input files
        "rm -f {output.sgb_report} {params.cat_reads}.bowtie2out.txt; cat {input.r1} {input.r2} > {params.cat_reads} && metaphlan {params.cat_reads} --index {metaphlan_index} --nproc {threads} --input_type fastq --bowtie2db {metaphlan_db_local1} -o {output.sgb_report} && touch {output.done}"

rule metaphlan_convert_profile_to_GTDB:
    input:
        report=output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.sgb_report"
    output:
        gtdb_report=output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.gtdb_profile",
        done=output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.gtdb_report.done"
    conda:
        "envs/metaphlan.yml"
    shell:
        "sgb_to_gtdb_profile.py -i {input.report} -o {output.gtdb_report} -d {metaphlan_db_local1}/mpa_vOct22_CHOCOPhlAnSGB_202212.pkl && touch {output.done}"

rule metaphlan_profile_to_condensed:
    input:
        report=output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.gtdb_profile"
    output:
        profile = output_dirs_dict['metaphlan'] + "/metaphlan/{sample}.profile",
    params:
        genome_pairs = os.path.join(workflow.basedir, 'genome_pairs.tsv'),
    conda:
        "envs/singlem.yml"
    shell:
        "{workflow.basedir}/../bin/metaphlan_to_condensed.py "
        "--metaphlan {input} "
        "--sample {wildcards.sample} "
        "--genome-pairs {params.genome_pairs} "
        "> {output.profile} "

###############################################################################################
###############################################################################################
###############################################################################################
#########
######### motus

# rule motus_copy_db:
#     input:
#         db=motus_db,
#     output:
#         db=directory(motus_db_path_local),
#         done=output_dirs_dict['motus'] + "/motus/data/done"
#     shell:
#         "mkdir -p {output.db} && rmdir {output.db} && cp -rvL {input.db} {output.db} && touch {output.done}"

rule motus_run:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        # done=output_dirs_dict['motus'] + "/motus/data/done"
    benchmark:
        benchmark_dir + "/motus/{sample}-"+str(num_threads)+"threads.benchmark"
    output:
        report=output_dirs_dict['motus'] + "/motus/{sample}.motus",
        done=output_dirs_dict['motus'] + "/motus/{sample}.profile.done"
    threads: num_threads
    conda:
        "envs/motus.yml"
    shell: # Run to kingdom level only
        "motus profile -t {threads} -db {motus_db} -f {input.r1} -r {input.r2} -o {output.report} -k kingdom -q && touch {output.done}"

rule motus_profile_to_condensed:
    input:
        report=output_dirs_dict['motus'] + "/motus/{sample}.motus"
    output:
        profile = output_dirs_dict['motus'] + "/motus/{sample}.profile",
    params:
        genome_pairs = os.path.join(workflow.basedir, 'genome_pairs.tsv'),
    conda:
        "envs/singlem.yml"
    shell:
        "{workflow.basedir}/../bin/motus_full_to_condensed_kingdom.py --motus {input.report} "
        "--sample {wildcards.sample} "
        "--genome-pairs {params.genome_pairs} "
        "> {output.profile} "


###############################################################################################
###############################################################################################
###############################################################################################
######### bracken


rule braken_copy_data:
    output:
        db=directory(kraken_db_local),
        done=output_dirs_dict['kraken'] + "/kraken/data/done"
    shell:
        "cp -r {kraken_db} {output.db}/ && touch {output.done}"

rule kraken_run:
    input:
        reads_copied1 = fastq_dir + "/{sample}.1.fq.gz",
        reads_copied2 = fastq_dir + "/{sample}.2.fq.gz",
        db=kraken_db_local,
        copy_braken_data_done=output_dirs_dict['kraken'] + "/kraken/data/done"
    benchmark:
        benchmark_dir + "/kraken/{sample}-"+str(num_threads)+"threads.benchmark"
    threads: kraken_num_threads
    output:
        report=output_dirs_dict['kraken'] + "/kraken/{sample}.kraken",
        done=output_dirs_dict['kraken'] + "/kraken/{sample}.kraken.done"
    conda:
        "envs/kraken.yml"
    shell:
        "kraken2 --db {input.db} --threads {num_threads} --output /dev/null --report {output.report} --paired {input.reads_copied1} {input.reads_copied2} && touch {output.done}"

rule braken_run:
    input:
        db=kraken_db_local,
        kraken_report=output_dirs_dict['kraken'] + "/kraken/{sample}.kraken",
        kraken_done=output_dirs_dict['kraken'] + "/kraken/{sample}.kraken.done"
    output:
        s=output_dirs_dict['kraken'] + "/braken/{sample}.report.S",
        g=output_dirs_dict['kraken'] + "/braken/{sample}.report.G",
        f=output_dirs_dict['kraken'] + "/braken/{sample}.report.F",
        o=output_dirs_dict['kraken'] + "/braken/{sample}.report.O",
        c=output_dirs_dict['kraken'] + "/braken/{sample}.report.C",
        p=output_dirs_dict['kraken'] + "/braken/{sample}.report.P",
        d=output_dirs_dict['kraken'] + "/braken/{sample}.report.D",
        done=output_dirs_dict['kraken'] + "/braken/{sample}.done"
    conda:
        "envs/bracken.yml"
    shell:
        "bracken -d {input.db} -r 150 -l S -t 10 -o {output.s} -i {input.kraken_report} && " \
        "bracken -d {input.db} -r 150 -l G -t 10 -o {output.g} -i {input.kraken_report} && " \
        "bracken -d {input.db} -r 150 -l F -t 10 -o {output.f} -i {input.kraken_report} && " \
        "bracken -d {input.db} -r 150 -l O -t 10 -o {output.o} -i {input.kraken_report} && " \
        "bracken -d {input.db} -r 150 -l C -t 10 -o {output.c} -i {input.kraken_report} && " \
        "bracken -d {input.db} -r 150 -l P -t 10 -o {output.p} -i {input.kraken_report} && " \
        "bracken -d {input.db} -r 150 -l D -t 10 -o {output.d} -i {input.kraken_report} && " \
        "touch {output.done}"


rule bracken_to_profile:
    input:
        output_dirs_dict['kraken'] + "/braken/{sample}.report.S",
        output_dirs_dict['kraken'] + "/braken/{sample}.report.G",
        output_dirs_dict['kraken'] + "/braken/{sample}.report.F",
        output_dirs_dict['kraken'] + "/braken/{sample}.report.O",
        output_dirs_dict['kraken'] + "/braken/{sample}.report.C",
        output_dirs_dict['kraken'] + "/braken/{sample}.report.P",
        output_dirs_dict['kraken'] + "/braken/{sample}.report.D",
        output_dirs_dict['kraken'] + "/braken/{sample}.done"
    params:
        report_prefix = output_dirs_dict['kraken']+"/braken/{sample}.report",
        biobox_dir = output_dirs_dict['kraken']+'/biobox',
        truth = truth_dir + "/{sample}.condensed.biobox",
    output:
        profile = output_dirs_dict['kraken'] + "/kraken/{sample}.profile",
    conda:
        "envs/singlem.yml"
    shell:
        # Convert reports to singlem condense format
        "mkdir -p {params.biobox_dir} && " \
        "{workflow.basedir}/../bin/kraken_to_condensed.py --report-prefix {params.report_prefix} " \
        "--bacterial-taxonomy ../bac120_taxonomy_r207.tsv " \
        "--archaeal-taxonomy ../ar53_taxonomy_r207.tsv > {output.profile}"

###############################################################################################
###############################################################################################
###############################################################################################
######### sourmash

rule sourmash_run:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        # done=output_dirs_dict['sourmash'] + "/sourmash/data/done"
    benchmark:
        benchmark_dir + "/sourmash/{sample}-"+str(num_threads)+"threads.benchmark"
    threads: num_threads
    output:
        report=output_dirs_dict['sourmash'] + "/sourmash/{sample}.csv",
        done=touch(output_dirs_dict['sourmash'] + "/sourmash/{sample}.profile.done")
    conda:
        "envs/sourmash.yml"
    params:
        output_dir = output_dirs_dict['sourmash'],
        sourmash_prefix = lambda wildcards: output_dirs_dict['sourmash'] + "/sourmash/"+wildcards.sample
    shell:
        # Sourmash does not seem to have a --threads option
        # sourmash tax annotate creates a file with-lineages in the CWD, so we need to cd into the output dir before running it
        "sourmash sketch dna -p k=31,abund --merge blah -o {params.sourmash_prefix}.sig {input.r1} {input.r2} "\
        "&& echo \"running gather..\" "\
        "&& sourmash gather -k 31 --dna {params.sourmash_prefix}.sig {sourmash_db_dna} -o {params.sourmash_prefix}.gather_gtdbrs207_reps.csv "\
        "&& echo \"running tax ..\" "\
        "&& sourmash tax metagenome -g {params.sourmash_prefix}.gather_gtdbrs207_reps.csv -t {sourmash_db_taxonomy} >{output.report}"

rule sourmash_to_condensed:
    input:
        output_dirs_dict['sourmash'] + "/sourmash/{sample}.csv",
    output:
        profile = output_dirs_dict['sourmash'] + "/sourmash/{sample}.profile",
    shell:
        "{workflow.basedir}/../bin/sourmash_to_condensed.py --summary-csv {input} " \
        "--sample {wildcards.sample} " \
        " > {output} "

###############################################################################################
###############################################################################################
###############################################################################################
######### kaiju

rule kaiju_copy_db:
    # input:
    #     db = kaiju_db_original_progenomes_fmi,
    #     nodes = kaiju_db_original_progenomes_nodes,
    #     names = kaiju_db_original_progenomes_names,
    output:
        db=kaiju_db,
        nodes = kaiju_db_progenomes_nodes,
        names = kaiju_db_progenomes_names,
        done=output_dirs_dict['kaiju'] + "/kaiju/data/done"
    shell:
        "mkdir -p {output_dirs_dict[kaiju]}/kaiju/data && " \
        "cp -rvL {kaiju_db_original_progenomes_fmi} {output.db} " \
        "&& cp -rvL {kaiju_db_original_progenomes_nodes} {output.nodes} " \
        "&& cp -rvL {kaiju_db_original_progenomes_names} {output.names} "\
        "&& touch {output.done}"
        
rule kaiju_run:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        db=kaiju_db,
        nodes = kaiju_db_progenomes_nodes,
        names = kaiju_db_progenomes_names,
        done=output_dirs_dict['kaiju'] + "/kaiju/data/done"
    benchmark:
        benchmark_dir + "/kaiju/{sample}-"+str(num_threads)+"threads.benchmark"
    threads: kraken_num_threads # kaiju can cause RAM issues when many are run at the same time.
    output:
        report=output_dirs_dict['kaiju'] + "/kaiju-run/{sample}.report",
        done=output_dirs_dict['kaiju'] + "/kaiju/{sample}.profile.done"
    conda:
        "envs/kaiju.yml"
    params:
        output_dir = output_dirs_dict['kaiju'],
        kaiju_prefix = lambda wildcards: output_dirs_dict['kaiju'] + "/kaiju/"+wildcards.sample
    shell:
        # kaiju -z 25 -t nodes.dmp -f kaiju_db_progenomes.fmi -i <(zcat ~/m/msingle/mess/124_singlem-benchmarking/2_phylogenetic_novelty/local_reads/GCA_020697715.1_genomic.1.fq.gz ~/m/msingle/mess/124_singlem-benchmarking/2_phylogenetic_novelty/local_reads/GCA_020697715.1_genomic.2.fq.gz) -o kaiju.out
        "kaiju -z {threads} -t {input.nodes} -f {input.db} -i <(zcat {input.r1} {input.r2}) -o {output.report} && " \
        "touch {output.done}"

rule kaiju_to_summarised_table:
    input:
        output_dirs_dict['kaiju'] + "/kaiju-run/{sample}.report",
    output:
        profile = output_dirs_dict['kaiju'] + "/kaiju/{sample}.summary.report",
        done=output_dirs_dict['kaiju'] + "/kaiju/{sample}.summary.report.done"
    conda:
        "envs/kaiju.yml"
    shell:
        # kaiju2table -t nodes.dmp -n names.dmp -r genus -o kaiju_summary.tsv kaiju.out
        "kaiju2table -t {kaiju_db_progenomes_nodes} -n {kaiju_db_progenomes_names} -r phylum -o {output.profile} {input} && touch {output.done}"

rule kaiju_to_condensed:
    input:
        output_dirs_dict['kaiju'] + "/kaiju/{sample}.summary.report",
    output:
        profile = output_dirs_dict['kaiju'] + "/kaiju/{sample}.profile",
    conda:
        "envs/kaiju_to_kingdom.yml"
    shell:
        "{workflow.basedir}/../bin/kaiju_to_kingdom_condensed.py --input {input} " \
        "--sample {wildcards.sample} " \
        "--data-dir {kaiju_db_original_dir} " \
        " > {output} "


###############################################################################################
###############################################################################################
###############################################################################################
######### MAP2B

# rule map2b_copy_data:
#     output:
#         db=directory(map2b_db_local),
#         done=touch(output_dirs_dict['map2b'] + "/map2b/data/done")
#     shell:
#         "cp -r {map2b_db} {output.db}/"

rule map2b_sample_setup:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
    output:
        listfile=output_dirs_dict['map2b'] + "/map2b/listfiles/{sample}",
        done=touch(output_dirs_dict['map2b'] + "/map2b/done/setup/{sample}.done")
    shell:
        "echo {wildcards.sample} {input.r1} {input.r2} |sed 's/ /\t/g' > {output.listfile}"

rule map2b_run:
    input:
        listfile=output_dirs_dict['map2b'] + "/map2b/listfiles/{sample}",
        # done=output_dirs_dict['map2b'] + "/map2b/data/done"
    output:
        tsv=output_dirs_dict['map2b'] + "/map2b/{sample}/Abundance.xls",
        done=touch(output_dirs_dict['map2b'] + "/map2b/done/run/{sample}.done")
    threads: num_threads
    benchmark:
        benchmark_dir + "/map2b/{sample}-"+str(num_threads)+"threads.benchmark"
    conda:
        "envs/MAP2B-20230420-conda.yml"
    params:
        output_dir = lambda wildcards, output: os.path.dirname(output.tsv),
    shell:
        "python3 {map2b_checkout_dir}/bin/MAP2B.py -i {input.listfile} -d {map2b_db}/.. -o {params.output_dir} -p {threads}"

rule map2b_to_biobox:
    input:
        tsv=output_dirs_dict['map2b'] + "/map2b/{sample}/Abundance.xls",
    output:
        profile = output_dirs_dict['map2b'] + "/map2b/{sample}.profile",
    shell:
        "{workflow.basedir}/../bin/map2b_to_condensed.py "
        "--abundance {input} "
        "--sample {wildcards.sample} "
        "> {output} "


###############################################################################################
###############################################################################################
###############################################################################################
######### metabuli

rule metabuli_copy_db:
    input:
        db=metabuli_db_dir,
    output:
        db=directory(metabuli_db_local),
        done=touch(output_dirs_dict['metabuli'] + "/metabuli/data/done")
    shell:
        "cp -r {input.db} {output.db}"

rule metabuli_run:
    input:
        r1=fastq_dir + "/{sample}.1.fq.gz",
        r2=fastq_dir + "/{sample}.2.fq.gz",
        db=metabuli_db_local,
        done=output_dirs_dict['metabuli'] + "/metabuli/data/done"
    output:
        report=output_dirs_dict['metabuli'] + "/output/{sample}_report.tsv",
        done=touch(output_dirs_dict['metabuli'] + "/output/{sample}.done")
    threads: num_threads
    benchmark:
        benchmark_dir + "/metabuli/{sample}-"+str(num_threads)+"threads.benchmark"
    conda:
        "envs/metabuli.yml"
    params:
        output_dir = output_dirs_dict['metabuli'],
    shell:
        "metabuli classify --threads {threads} {input.r1} {input.r2} {input.db} {params.output_dir}/output {wildcards.sample}"

rule metabuli_report_to_condensed:
    input:
        report=output_dirs_dict['metabuli'] + "/output/{sample}_report.tsv",
    output:
        profile = output_dirs_dict['metabuli'] + "/metabuli/{sample}.profile",
    shell:
        "{workflow.basedir}/../bin/metabuli_to_condensed.py --input {input} " \
        "--bacterial-taxonomy ../bac120_taxonomy_r207.tsv " \
        "--archaeal-taxonomy ../ar53_taxonomy_r207.tsv > {output.profile}"